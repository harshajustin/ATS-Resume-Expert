"""
PDF Generation Utilities for ATS Resume Expert
"""
import io
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.colors import HexColor
import re

def create_pdf_response(title, response, filename_prefix="ATS_Analysis"):
    """
    Creates a professionally formatted PDF from the AI response.
    
    Args:
        title (str): The title of the analysis
        response (str): The AI-generated response content
        filename_prefix (str): Prefix for the filename
    
    Returns:
        tuple: (pdf_bytes, filename)
    """
    
    # Create a BytesIO buffer to hold the PDF
    buffer = io.BytesIO()
    
    # Create the PDF document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=0.75*inch,
        leftMargin=0.75*inch,
        topMargin=1*inch,
        bottomMargin=1*inch
    )
    
    # Define styles
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=20,
        textColor=HexColor('#2E4A8B'),
        alignment=1  # Center alignment
    )
    
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        textColor=HexColor('#1F3A6B'),
        spaceBefore=20
    )
    
    body_style = ParagraphStyle(
        'CustomBody',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=12,
        textColor=HexColor('#333333'),
        leading=14
    )
    
    highlight_style = ParagraphStyle(
        'Highlight',
        parent=styles['Normal'],
        fontSize=12,
        spaceAfter=12,
        textColor=HexColor('#D2691E'),
        leading=14,
        leftIndent=20
    )
    
    # Build the PDF content
    story = []
    
    # Header with title and timestamp
    story.append(Paragraph("ðŸŽ¯ ATS Resume Expert", title_style))
    story.append(Paragraph(f"Analysis Report: {title}", subtitle_style))
    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%B %d, %Y at %H:%M')}", body_style))
    story.append(Spacer(1, 20))
    
    # Process the response content
    content_parts = _parse_response_content(response)
    
    for part in content_parts:
        if part['type'] == 'heading':
            story.append(Paragraph(part['content'], subtitle_style))
        elif part['type'] == 'highlight':
            story.append(Paragraph(part['content'], highlight_style))
        elif part['type'] == 'body':
            # Handle line breaks and formatting
            formatted_content = part['content'].replace('\n', '<br/>')
            story.append(Paragraph(formatted_content, body_style))
        elif part['type'] == 'spacer':
            story.append(Spacer(1, 12))
    
    # Footer
    story.append(Spacer(1, 30))
    story.append(Paragraph("â”€" * 50, body_style))
    story.append(Paragraph("Generated by ATS Resume Expert - Your AI-Powered Career Assistant", 
                          ParagraphStyle('Footer', parent=styles['Normal'], fontSize=9, 
                                       textColor=HexColor('#666666'), alignment=1)))
    
    # Build the PDF
    doc.build(story)
    
    # Get the PDF data
    pdf_data = buffer.getvalue()
    buffer.close()
    
    # Generate filename
    safe_title = re.sub(r'[^\w\s-]', '', title.strip())
    safe_title = re.sub(r'[-\s]+', '_', safe_title)
    filename = f"{filename_prefix}_{safe_title}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    
    return pdf_data, filename

def _parse_response_content(response):
    """
    Parses the AI response content into structured parts for PDF formatting.
    
    Args:
        response (str): The raw response content
    
    Returns:
        list: List of content parts with type and content
    """
    parts = []
    lines = response.split('\n')
    
    for line in lines:
        line = line.strip()
        
        if not line:
            parts.append({'type': 'spacer', 'content': ''})
            continue
        
        # Check for headings (lines with ### or ** formatting)
        if line.startswith('###') or (line.startswith('**') and line.endswith('**')):
            heading_text = line.replace('###', '').replace('**', '').strip()
            parts.append({'type': 'heading', 'content': heading_text})
        
        # Check for bullet points or numbered lists
        elif line.startswith(('â€¢', '-', '*')) or re.match(r'^\d+\.', line):
            parts.append({'type': 'highlight', 'content': line})
        
        # Check for percentage matches
        elif re.search(r'\d+%', line):
            parts.append({'type': 'highlight', 'content': f"ðŸŽ¯ {line}"})
        
        # Regular content
        else:
            parts.append({'type': 'body', 'content': line})
    
    return parts

def create_multi_analysis_pdf(analyses, filename_prefix="ATS_Complete_Analysis"):
    """
    Creates a comprehensive PDF with multiple analysis results.
    
    Args:
        analyses (dict): Dictionary of analysis titles and responses
        filename_prefix (str): Prefix for the filename
    
    Returns:
        tuple: (pdf_bytes, filename)
    """
    buffer = io.BytesIO()
    
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=0.75*inch,
        leftMargin=0.75*inch,
        topMargin=1*inch,
        bottomMargin=1*inch
    )
    
    styles = getSampleStyleSheet()
    
    # Custom styles
    main_title_style = ParagraphStyle(
        'MainTitle',
        parent=styles['Title'],
        fontSize=20,
        spaceAfter=30,
        textColor=HexColor('#2E4A8B'),
        alignment=1
    )
    
    story = []
    
    # Main title page
    story.append(Paragraph("ðŸŽ¯ ATS Resume Expert", main_title_style))
    story.append(Paragraph("Complete Analysis Report", 
                          ParagraphStyle('Subtitle', parent=styles['Heading1'], 
                                       fontSize=16, alignment=1, spaceAfter=20)))
    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%B %d, %Y at %H:%M')}", 
                          ParagraphStyle('Date', parent=styles['Normal'], 
                                       fontSize=12, alignment=1, spaceAfter=30)))
    
    # Table of contents
    story.append(Paragraph("ðŸ“‹ Contents", styles['Heading1']))
    for i, title in enumerate(analyses.keys(), 1):
        story.append(Paragraph(f"{i}. {title}", styles['Normal']))
    
    story.append(PageBreak())
    
    # Add each analysis
    for i, (title, response) in enumerate(analyses.items(), 1):
        if i > 1:
            story.append(PageBreak())
        
        story.append(Paragraph(f"{i}. {title}", styles['Heading1']))
        story.append(Spacer(1, 20))
        
        content_parts = _parse_response_content(response)
        for part in content_parts:
            if part['type'] == 'heading':
                story.append(Paragraph(part['content'], styles['Heading2']))
            elif part['type'] == 'highlight':
                story.append(Paragraph(part['content'], 
                                     ParagraphStyle('Highlight', parent=styles['Normal'], 
                                                  leftIndent=20, textColor=HexColor('#D2691E'))))
            elif part['type'] == 'body':
                formatted_content = part['content'].replace('\n', '<br/>')
                story.append(Paragraph(formatted_content, styles['Normal']))
            elif part['type'] == 'spacer':
                story.append(Spacer(1, 12))
    
    doc.build(story)
    
    pdf_data = buffer.getvalue()
    buffer.close()
    
    filename = f"{filename_prefix}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    
    return pdf_data, filename
